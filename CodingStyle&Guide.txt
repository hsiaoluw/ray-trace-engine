1. Put a header guard/include guard at the top of each `.h` file, but not any `.cpp` file. Do not use `#pragma once` directive. Use `#ifndef`, `#define` and `#endif`.
2. For your convenience, include `gz.h` at the beginning of every header file.
3. For every class you write/develop, use the class name `GzSomething` as the name for your `.h` file and `.cpp` file. Avoid simple names such as `vector.h`, `color.cpp` etc, because simple names are easier to collide with other files. And pay attention to the capital letters.
4. `GZ_SUCCESS` is 0 and `GZ_FAILURE` is 1, because that's Unix's convention. We don't use C++ `bool` type because integer status is possible to provide more kinds of status. And don't get confused about C++ `bool` literals: `true` is actually integer 1 and `false` is actually integer 0.
5. Do not use bitwise OR assignment operator `|=` as in the code given by CS580 instructors. That will not perform short circuit evaluation as you may think. Use `status = status || some_thing;` instead.
6. C++ style type casting `static_cast<type_name>(var)` is preferred over C style type casting `(type_name) var` or `type_name(var)`. If you need type casting, especially the ones causing data loss, use `static_cast`.
7. Avoid pass-by-value if you are passing an object of any class to functions. Use constant reference in your function definition like `ret_type function(const Class_name &p1, const Class_name &p2)`. This is a consideration for performance. However, use pass-by-value for primitive types.
8. As an extension to #7: Avoid copying of an object of any class, unless you are doing that intentionally. Define a new object like `Class_name var(p1, p2)` to call the constructor; pass parameters to functions with pass-by-const-reference.
9. Provide a default constructor that takes no parameters for your class. If you like, you can use delegating constructor to help you: write a general constructor, and use delegating constructor for a constructor with no parameters. However, default constructor is usually not preferred to use when you are creating a new instance.
10. Don't use return-by-reference, although it is tempting to use return-by-reference to enhance efficiency. First reason is, in our situation returning by reference cannot be easily applied. We are frequently returning a value that goes out of scope immediately. Second reason is, after some experiment, I found that might not enhance performance as I expected. Do experiments and tests as you like.
11. About tests: There is no obstacles for you to write a console program `main.cpp` to test your idea. You may need to add some code for printing results and including `<iostream>` for your test. But they are quite easy.
12. Pay attention as you code!!! Even if you don't have a perfect environment for testing, you should avoid typos, wrong including names etc. If you are unsure about something, read!
13. Avoid using /* ... */ for multi-line comments. The reason is, this makes commenting out large bulk of data harder. Use // on every line if you want to comment multi lines out. It's only OK if you use /* ... */ temporarily and remove them in your submitted code.
